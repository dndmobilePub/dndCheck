// ir
@mixin ir-reset($width, $height) {
    position: absolute !important;
    overflow: hidden !important;
    height: $height !important;
    width: $width !important;
    margin: 0 !important;
    padding: 0 !important;
    line-height: 0 !important;
    border: 0;
}

@mixin ir($ir) {
    @if ($ir =="hide") {
        @include ir-reset(1px, 1px);
        clip: rect(1px 1px 1px 1px);
    }

    @else if($ir =="blind") {
        @include ir-reset(0, 0);
        display: block !important;
        font-size: 1px !important;
        z-index: -1;
    }

    @else if($ir =="screen") {
        @include ir-reset(0, 0);
        font-size: 1px;
        text-indent: -9999px;
    }
}

@mixin clearfix {
    &:after {
        content: "";
        display: block;
        clear: both;
        height: 0;
    }
}

// gradient
@mixin bg-gradient($type, $angle, $color1, $color2) {
    @if ($type ==line) {
        background: linear-gradient($angle, $color1, $color2);
        @content;
    }

    @else if ($type ==circle) {
        background: radial-gradient(circle, $color1, $color2);
        @content;
    }

}

@mixin eff-direction($direction) {
    @if ($direction ==left) {
        left: 0;
        @content;
    }

    @else if ($direction ==right) {
        right: 0;
        @content;
    }

    @else if ($direction ==center) {
        left: 50%;
        transform: translateX(-50%);
        @content;
    }
}

@mixin line-effect($color, $el-type, $direction) {
    backface-visibility: hidden;
    position: relative;
    text-decoration: none;
    color: $color;

    @include el-content($el-type) {
        backface-visibility: hidden;
        position: absolute;
        @include eff-direction($direction);
        @content;
    }
}

@mixin fullHeight ($height: 100vh) {
    height: 100%;
    height: $height;
    min-height: $height;
}

@mixin ellipsis($line: 1, $height: null) {

    @if ($line ==1) {
        display: block;
        overflow: hidden;
        text-overflow: ellipsis;
        -o-text-overflow: ellipsis;
        -moz-binding: url(ellipsis.xml#ellipsis);
        white-space: nowrap;
        height: $height;
    }

    @else {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: $line;
        overflow: hidden;
        text-overflow: ellipsis;
        -o-text-overflow: ellipsis;
        -moz-binding: url(ellipsis.xml#ellipsis);
        height: $height;
        white-space: normal;
        word-break: auto-phrase;
        word-break: break-all;
    }
}

@mixin btn-v($vertical) {
    height: $vertical+ rem;
    line-height: ($vertical - 0.1)+ rem;
}

@mixin btnSize($size, $pad: null, $radius: .8) {
    padding: $pad;

    @if ($size =="xs") {
        @include fontSize("xs2");
    }

    @else if ($size =="s") {
        @include fontSize("base");
        font-weight: 400;
    }

    @else if ($size =="md") {
        @include fontSize("base");
    }

    @else if ($size =="lg") {
        @include fontSize("md");
    }

    @else if ($size =="xl") {
        @include fontSize("lg");
    }

    border-radius:$radius+rem;
    line-height:initial;
    // z-index: 0;
    isolation: isolate;
}

@mixin el-size ($width, $height, $minW: null, $maxW: null, $minH: null, $maxH: null) {
    width: $width;
    min-width: $minW;
    max-width: $maxW;
    height: $height;
    min-height: $minH;
    max-height: $maxH;
    @content;
}

@mixin el-content($el-type, $display: block) {
    @if ($el-type =="after") {
        &::after {
            content: "";
            display: $display;
            @content;
        }
    }

    @else if ($el-type =="before") {
        &::before {
            content: "";
            display: $display;
            @content;
        }
    }

    @else if ($el-type =="both") {
        &::before {
            content: "";
            display: $display;
            @content;
        }

        &::after {
            content: "";
            display: $display;
            @content;
        }
    }
}

@mixin obj-offset-align($pos: absolute, $direction: center, $top: null, $left: null, $bottom: null, $right: null) {
    position: $pos;

    @if ($direction =="center") {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        @content;
    }

    @else if ($direction =="all") {
        top: $top;
        left: $left;
        transform: translate(-$left, -$top);
    }

    @else if ($direction =="vertical") {
        top: $top;
        left: $left;
        bottom: $bottom;
        right: $right;
        transform: translateY(-$top);
        @content;
    }

    @else if ($direction =="horizontal") {
        top: $top;
        left: $left;
        bottom: $bottom;
        right: $right;
        transform: translateX(-$left);
        @content;
    }

    @content;
}

@mixin pos-offset($pos: absolute, $top: null, $left: null, $bottom: null, $right: null, $z-index: null) {
    position: $pos;
    top: $top;
    left: $left;
    bottom: $bottom;
    right: $right;
    z-index: $z-index;
    @content;
}

@mixin dflex($display: flex, $direction: row, $wrap: null, $j-content: null, $al-items: null, $al-content: null, $gap: null) {
    display: $display;
    flex-direction: $direction; // row, row-reverse, column, column-reverse
    flex-wrap: $wrap; // nowrap, wrap, wrap-reverse
    justify-content: $j-content; // flex-start, flex-end, center, space-around, space-between, space-evenly
    align-items: $al-items; // stretch, flex-start, flex-end, center
    align-content: $al-content; // flex-start, flex-end, center, space-around, space-between, space-evenly
    gap: $gap; // ios 14.1 이하로 대응안됨
    @content;
}

@mixin transition($time, $el, $effect: ease-in-out) {
    transition: $time $el $effect;
    @content;
}

/** FONT **/
/* clamp 기반 font-size
// 최소 크기 $min, 기본 크기 $preferred, 최대 크기 $max 사이에서 뷰포트에 따라 자동으로 크기가 반응형으로 조정
@mixin font-clamp($min: 0.9rem, $preferred: 1.6rem, $max: 4rem) {
  font-size: clamp($min, $preferred + 1vw, $max);
}
// 사용예시
.txt-desc {@include font-clamp(1.2rem, 1.6rem, 3.2rem);}
.txt-small {@include font-clamp(0.9rem, 1.2rem, 1.6rem);}
.txt-default {@include font-clamp(최소값, 선호값, 최대값);} // 최소값은 $min, 최대값은 $max를 벗어날수 없음
 */

// /* scale 기반 font-size */
// @function fontSize($step, $step-size: 0.2rem, $base-size: 1.6rem, $min-size: 0.9rem, $max-size: 3.2rem) {
//   $calculated-size: $base-size + ($step * $step-size);

//     @if $calculated-size < $min-size {
//         @return $min-size;
//     } @else if $calculated-size > $max-size {
//         @return $max-size;
//     } @else {
//         @return $calculated-size;
//     }
// }

// $font-scale: (
//     3xs: #{fontSize(-4)},
//     2xs: #{fontSize(-3)},
//     xs: #{fontSize(-2)},
//     sm: #{fontSize(-1)},
//     default: #{fontSize(0)},
//     lg: #{fontSize(1)},
//     xl: #{fontSize(2)},
//     2xl: #{fontSize(3)},
//     3xl: #{fontSize(4)}
// );
// // 폰트 크기만 처리
// @mixin font-size($key, $fallback: 1.6rem) {
//   $value: map-get($font-scale, $key);

//   @if $value == null {
//     font-size: $fallback;
//   } @else {
//     font-size: $value;
//   }
// }

// @mixin font($key: base, $fontweight: 500, $color: null, $fontName: null, $lheight: null) {
//   @include font-size($key);

//   font: {
//     family: if($fontName != null, $fontName, inherit);
//     weight: $fontweight;
//   }

//   @if $lheight != null {
//     line-height: $lheight;
//   }

//   @if $color != null {
//     color: $color;
//   }

//   @content;
// }

// /* Typography Mixin */
// /* 문자열 % 포함 수치 변환 */
@function str-to-number($string) {
    @if type-of($string)=='string' and str-index($string, '%') !=null {
        $num-str: str-slice($string, 1, str-index($string, '%') - 1);
        @return $num-str * 1 / 100;
    }

    @else if type-of($string)=='number' {
        @return $string;
    }

    @else {
        @error "⚠️ [str-to-number] Unexpected value: #{$string}";
    }
}

// /* 사이즈 토큰 + 숫자/퍼센트 안전 처리 함수 */
@function safe-size($size-token, $fallback-token-map, $category) {
    @if type-of($size-token)=='number' or (type-of($size-token)=='string' and str-index($size-token, '%') !=null) {
        @return $size-token;
    }

    @else {
        @return dndToken($fallback-token-map, $category, $size-token);
    }
}

@mixin typography($font-family: default,
    $weight: regular,
    $size: 16,
    $line-height-value: null,
    $letter-spacing-value: null) {
    // 폰트 패밀리와 웨이트는 항상 토큰 기반으로 처리
    $font-family: dndToken($typography-primitive, font-family, $font-family);
    $font-weight: dndToken($typography-primitive, weight, $weight);

    // 사이즈 안전 처리
    $font-size: safe-size($size, $typography-primitive, size);

    // 라인하이트 안전 처리 (넘버, %, 토큰 모두 허용)
    $line-height: if($line-height-value !=null,
            safe-size($line-height-value, $typography-primitive, line-height),
            safe-size(130, $typography-primitive, line-height));

    // 레터 스페이싱 안전 처리 (넘버, %, 토큰 모두 허용)
    $letter-spacing: if($letter-spacing-value !=null,
            safe-size($letter-spacing-value, $typography-primitive, letter-spacing),
            safe-size(normal, $typography-primitive, letter-spacing));

    font-family: $font-family;
    font-weight: $font-weight;
    font-size: $font-size;
    line-height: $line-height;
    letter-spacing: $letter-spacing;
}


@mixin overflow ($offset, $overflow) {
    @if ($offset==x) {
        overflow-x: $overflow;
    }

    @else if ($offset==y) {
        overflow-y: $overflow;
    }

    @else if ($offset==both) {
        overflow: $overflow;
    }
}

@mixin line($attribute, $args...) {
    @if $attribute =="border" {
        $argument: nth($args, 1);
        $direction: if(length($args) >=2, nth($args, 2), all);
        $radius: if(length($args) >=3, nth($args, 3), null);

        @if $direction =="all" {border: $argument;}
        @else if $direction =="top" {border-top: $argument;}
        @else if $direction =="left" {border-left: $argument;}
        @else if $direction =="bottom" {border-bottom: $argument;}
        @else if $direction =="right" {border-right: $argument;}

        @if $radius !=null {
            border-radius: $radius;
        }
    }

    @else if $attribute =="outline" {
        $argument: nth($args, 1);
        $direction: if(length($args) >=2, nth($args, 2), all);
        $offset: if(length($args) >=3, nth($args, 3), null);

        @if $direction =="all" {outline: $argument;}
        @else if $direction =="top" {outline-top: $argument;}
        @else if $direction =="left" {outline-left: $argument;}
        @else if $direction =="bottom" {outline-bottom: $argument;}
        @else if $direction =="right" {outline-right: $argument;}

        @if $offset !=null {
            outline-offset: $offset;
        }
    }

    @else if $attribute =="inset" {
        $color: if(length($args) >=1, nth($args, 1), black);
        $thickness: if(length($args) >=2, nth($args, 2), .1rem);

        box-shadow: 0 0 0 $thickness $color inset;
    }

    @content;
}


$svgIcoURL: '../img/';

@mixin svgIco($url: $svgIcoURL, $file: null, $color: $color-black, $size: null) {
    mask-image: url("#{$svgIcoURL}#{$file}.svg");
    background-color: $color;
    width: $size;
    height: $size;
    mask-size: 100% auto;
    @content;
}

$bgIcoURL: '../img/';

@mixin bgIco($url: $bgIcoURL, $file: null, $color: null, $pos: 0 0, $repeat: no-repeat, $size: null) {
    background: $color url($bgIcoURL + $file + '.png') $pos $repeat;
    background-size: $size;
    @content;
}

@function svgIconForm($iconName, $color: 666, $backgroundRepeat: no-repeat) {
    $iconList: (
        chk-line:"%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23#{$color}' viewBox='0 0 16 16'%3E%3Cpath d='M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z'/%3E%3C/svg%3E",

        chk-line-lg:"%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23#{$color}' viewBox='0 0 16 16'%3E%3Cpath d='M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z'/%3E%3C/svg%3E",

        chk-line-circle:"%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23#{$color}' viewBox='0 0 16 16'%3E%3Cpath d='M2.5 8a5.5 5.5 0 0 1 8.25-4.764.5.5 0 0 0 .5-.866A6.5 6.5 0 1 0 14.5 8a.5.5 0 0 0-1 0 5.5 5.5 0 1 1-11 0z'/%3E%3Cpath d='M15.354 3.354a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l7-7z'/%3E%3C/svg%3E",

        chk-circle: "%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23#{$color}' viewBox='0 0 16 16'%3E%3Cpath d='M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z'/%3E%3Cpath d='M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z'/%3E%3C/svg%3E",

        chk-circle-fill:"%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23#{$color}' viewBox='0 0 16 16'%3E%3Cpath d='M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z'/%3E%3C/svg%3E",

        chk-line-square:"%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23#{$color}' viewBox='0 0 16 16'%3E%3Cpath d='M3 14.5A1.5 1.5 0 0 1 1.5 13V3A1.5 1.5 0 0 1 3 1.5h8a.5.5 0 0 1 0 1H3a.5.5 0 0 0-.5.5v10a.5.5 0 0 0 .5.5h10a.5.5 0 0 0 .5-.5V8a.5.5 0 0 1 1 0v5a1.5 1.5 0 0 1-1.5 1.5H3z'/%3E%3Cpath d='m8.354 10.354 7-7a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0z'/%3E%3C/svg%3E",

        chk-square:"%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23#{$color}' viewBox='0 0 16 16'%3E%3Cpath d='M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z'/%3E%3Cpath d='M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.235.235 0 0 1 .02-.022z'/%3E%3C/svg%3E",

        chk-square-fill:"%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23#{$color}' viewBox='0 0 16 16'%3E%3Cpath d='M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm10.03 4.97a.75.75 0 0 1 .011 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.75.75 0 0 1 1.08-.022z'/%3E%3C/svg%3E",

    );
$svgIcon: map-get($iconList, $iconName);
$backgroundImage: url("data:image/svg+xml;charset=utf8,#{$svgIcon}");
@return $backgroundImage $backgroundRepeat;
}

@mixin split($col, $space) {
    width: calc(100%/$col - ($space * ($col - 1)));
}

%transition3s {
    @include transition(.3s, all, ease-in-out);
}